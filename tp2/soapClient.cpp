/* soapClient.cpp
   Generated by gSOAP 2.8.129 for ThkWCIntf.h

gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.129 2023-07-05 11:17:09 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &Collection)
{	if (soap_send_ns1__ExecuteSoapJmsRPC(soap, soap_endpoint, soap_action) || soap_recv_ns1__ExecuteSoapJmsRPC(soap, Collection))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns1__ExecuteSoapJmsRPC soap_tmp_ns1__ExecuteSoapJmsRPC;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPC";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__ExecuteSoapJmsRPC(soap, &soap_tmp_ns1__ExecuteSoapJmsRPC);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ExecuteSoapJmsRPC(soap, &soap_tmp_ns1__ExecuteSoapJmsRPC, "ns1:ExecuteSoapJmsRPC", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ExecuteSoapJmsRPC(soap, &soap_tmp_ns1__ExecuteSoapJmsRPC, "ns1:ExecuteSoapJmsRPC", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__ExecuteSoapJmsRPC(struct soap *soap, std::string &Collection)
{
	struct ns1__ExecuteSoapJmsRPCResponse *soap_tmp_ns1__ExecuteSoapJmsRPCResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__ExecuteSoapJmsRPCResponse = soap_get_ns1__ExecuteSoapJmsRPCResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__ExecuteSoapJmsRPCResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__ExecuteSoapJmsRPCResponse->Collection;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__GetWSDL(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &Collection)
{	if (soap_send_ns1__GetWSDL(soap, soap_endpoint, soap_action) || soap_recv_ns1__GetWSDL(soap, Collection))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__GetWSDL(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns1__GetWSDL soap_tmp_ns1__GetWSDL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!GetWSDL";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__GetWSDL(soap, &soap_tmp_ns1__GetWSDL);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetWSDL(soap, &soap_tmp_ns1__GetWSDL, "ns1:GetWSDL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetWSDL(soap, &soap_tmp_ns1__GetWSDL, "ns1:GetWSDL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__GetWSDL(struct soap *soap, std::string &Collection)
{
	struct ns1__GetWSDLResponse *soap_tmp_ns1__GetWSDLResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetWSDLResponse = soap_get_ns1__GetWSDLResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__GetWSDLResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__GetWSDLResponse->Collection;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jmsexample(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& arg1, const std::string& arg2, std::string &Collection)
{	if (soap_send_ns1__jmsexample(soap, soap_endpoint, soap_action, arg1, arg2) || soap_recv_ns1__jmsexample(soap, Collection))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__jmsexample(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& arg1, const std::string& arg2)
{	struct ns1__jmsexample soap_tmp_ns1__jmsexample;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!jmsexample";
	soap_tmp_ns1__jmsexample.arg1 = arg1;
	soap_tmp_ns1__jmsexample.arg2 = arg2;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__jmsexample(soap, &soap_tmp_ns1__jmsexample);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jmsexample(soap, &soap_tmp_ns1__jmsexample, "ns1:jmsexample", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jmsexample(soap, &soap_tmp_ns1__jmsexample, "ns1:jmsexample", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__jmsexample(struct soap *soap, std::string &Collection)
{
	struct ns1__jmsexampleResponse *soap_tmp_ns1__jmsexampleResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__jmsexampleResponse = soap_get_ns1__jmsexampleResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__jmsexampleResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__jmsexampleResponse->Collection;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &Collection)
{	if (soap_send_ns1__ping(soap, soap_endpoint, soap_action) || soap_recv_ns1__ping(soap, Collection))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__ping(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns1__ping soap_tmp_ns1__ping;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!ping";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__ping(soap, &soap_tmp_ns1__ping);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ping(soap, &soap_tmp_ns1__ping, "ns1:ping", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ping(soap, &soap_tmp_ns1__ping, "ns1:ping", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__ping(struct soap *soap, std::string &Collection)
{
	struct ns1__pingResponse *soap_tmp_ns1__pingResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__pingResponse = soap_get_ns1__pingResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__pingResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__pingResponse->Collection;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__findModelByName(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& partNumber, std::string &Collection)
{	if (soap_send_ns1__findModelByName(soap, soap_endpoint, soap_action, partNumber) || soap_recv_ns1__findModelByName(soap, Collection))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__findModelByName(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& partNumber)
{	struct ns1__findModelByName soap_tmp_ns1__findModelByName;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!findModelByName";
	soap_tmp_ns1__findModelByName.partNumber = partNumber;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__findModelByName(soap, &soap_tmp_ns1__findModelByName);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__findModelByName(soap, &soap_tmp_ns1__findModelByName, "ns1:findModelByName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__findModelByName(soap, &soap_tmp_ns1__findModelByName, "ns1:findModelByName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__findModelByName(struct soap *soap, std::string &Collection)
{
	struct ns1__findModelByNameResponse *soap_tmp_ns1__findModelByNameResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__findModelByNameResponse = soap_get_ns1__findModelByNameResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__findModelByNameResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__findModelByNameResponse->Collection;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__findModelStreamByName(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& partNumber, std::string &Collection)
{	if (soap_send_ns1__findModelStreamByName(soap, soap_endpoint, soap_action, partNumber) || soap_recv_ns1__findModelStreamByName(soap, Collection))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__findModelStreamByName(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& partNumber)
{	struct ns1__findModelStreamByName soap_tmp_ns1__findModelStreamByName;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByName";
	soap_tmp_ns1__findModelStreamByName.partNumber = partNumber;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__findModelStreamByName(soap, &soap_tmp_ns1__findModelStreamByName);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__findModelStreamByName(soap, &soap_tmp_ns1__findModelStreamByName, "ns1:findModelStreamByName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__findModelStreamByName(soap, &soap_tmp_ns1__findModelStreamByName, "ns1:findModelStreamByName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__findModelStreamByName(struct soap *soap, std::string &Collection)
{
	struct ns1__findModelStreamByNameResponse *soap_tmp_ns1__findModelStreamByNameResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__findModelStreamByNameResponse = soap_get_ns1__findModelStreamByNameResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__findModelStreamByNameResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__findModelStreamByNameResponse->Collection;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
