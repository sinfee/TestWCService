/* soapH.h
   Generated by gSOAP 2.8.129 for ThkWCIntf.h

gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns1__findModelStreamByName_DEFINED
#define SOAP_TYPE_ns1__findModelStreamByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__findModelStreamByName(struct soap*, struct ns1__findModelStreamByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__findModelStreamByName(struct soap*, const struct ns1__findModelStreamByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__findModelStreamByName(struct soap*, const char*, int, const struct ns1__findModelStreamByName *, const char*);
SOAP_FMAC3 struct ns1__findModelStreamByName * SOAP_FMAC4 soap_in_ns1__findModelStreamByName(struct soap*, const char*, struct ns1__findModelStreamByName *, const char*);
SOAP_FMAC1 struct ns1__findModelStreamByName * SOAP_FMAC2 soap_instantiate_ns1__findModelStreamByName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__findModelStreamByName * soap_new_ns1__findModelStreamByName(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__findModelStreamByName(soap, n, NULL, NULL, NULL);
}

inline struct ns1__findModelStreamByName * soap_new_req_ns1__findModelStreamByName(
	struct soap *soap,
	const std::string& partNumber)
{
	struct ns1__findModelStreamByName *_p = ::soap_new_ns1__findModelStreamByName(soap);
	if (_p)
	{	::soap_default_ns1__findModelStreamByName(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}

inline struct ns1__findModelStreamByName * soap_new_set_ns1__findModelStreamByName(
	struct soap *soap,
	const std::string& partNumber)
{
	struct ns1__findModelStreamByName *_p = ::soap_new_ns1__findModelStreamByName(soap);
	if (_p)
	{	::soap_default_ns1__findModelStreamByName(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__findModelStreamByName(struct soap*, const struct ns1__findModelStreamByName *, const char*, const char*);

inline int soap_write_ns1__findModelStreamByName(struct soap *soap, struct ns1__findModelStreamByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__findModelStreamByName(soap, p), 0) || ::soap_put_ns1__findModelStreamByName(soap, p, "ns1:findModelStreamByName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__findModelStreamByName(struct soap *soap, const char *URL, struct ns1__findModelStreamByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelStreamByName(soap, p), 0) || ::soap_put_ns1__findModelStreamByName(soap, p, "ns1:findModelStreamByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__findModelStreamByName(struct soap *soap, const char *URL, struct ns1__findModelStreamByName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelStreamByName(soap, p), 0) || ::soap_put_ns1__findModelStreamByName(soap, p, "ns1:findModelStreamByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__findModelStreamByName(struct soap *soap, const char *URL, struct ns1__findModelStreamByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelStreamByName(soap, p), 0) || ::soap_put_ns1__findModelStreamByName(soap, p, "ns1:findModelStreamByName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__findModelStreamByName * SOAP_FMAC4 soap_get_ns1__findModelStreamByName(struct soap*, struct ns1__findModelStreamByName *, const char*, const char*);

inline int soap_read_ns1__findModelStreamByName(struct soap *soap, struct ns1__findModelStreamByName *p)
{
	if (p)
	{	::soap_default_ns1__findModelStreamByName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__findModelStreamByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__findModelStreamByName(struct soap *soap, const char *URL, struct ns1__findModelStreamByName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__findModelStreamByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__findModelStreamByName(struct soap *soap, struct ns1__findModelStreamByName *p)
{
	if (::soap_read_ns1__findModelStreamByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__findModelStreamByNameResponse_DEFINED
#define SOAP_TYPE_ns1__findModelStreamByNameResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__findModelStreamByNameResponse(struct soap*, struct ns1__findModelStreamByNameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__findModelStreamByNameResponse(struct soap*, const struct ns1__findModelStreamByNameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__findModelStreamByNameResponse(struct soap*, const char*, int, const struct ns1__findModelStreamByNameResponse *, const char*);
SOAP_FMAC3 struct ns1__findModelStreamByNameResponse * SOAP_FMAC4 soap_in_ns1__findModelStreamByNameResponse(struct soap*, const char*, struct ns1__findModelStreamByNameResponse *, const char*);
SOAP_FMAC1 struct ns1__findModelStreamByNameResponse * SOAP_FMAC2 soap_instantiate_ns1__findModelStreamByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__findModelStreamByNameResponse * soap_new_ns1__findModelStreamByNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__findModelStreamByNameResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__findModelStreamByNameResponse * soap_new_req_ns1__findModelStreamByNameResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__findModelStreamByNameResponse *_p = ::soap_new_ns1__findModelStreamByNameResponse(soap);
	if (_p)
	{	::soap_default_ns1__findModelStreamByNameResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__findModelStreamByNameResponse * soap_new_set_ns1__findModelStreamByNameResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__findModelStreamByNameResponse *_p = ::soap_new_ns1__findModelStreamByNameResponse(soap);
	if (_p)
	{	::soap_default_ns1__findModelStreamByNameResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__findModelStreamByNameResponse(struct soap*, const struct ns1__findModelStreamByNameResponse *, const char*, const char*);

inline int soap_write_ns1__findModelStreamByNameResponse(struct soap *soap, struct ns1__findModelStreamByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__findModelStreamByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelStreamByNameResponse(soap, p, "ns1:findModelStreamByNameResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__findModelStreamByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelStreamByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelStreamByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelStreamByNameResponse(soap, p, "ns1:findModelStreamByNameResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__findModelStreamByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelStreamByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelStreamByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelStreamByNameResponse(soap, p, "ns1:findModelStreamByNameResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__findModelStreamByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelStreamByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelStreamByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelStreamByNameResponse(soap, p, "ns1:findModelStreamByNameResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__findModelStreamByNameResponse * SOAP_FMAC4 soap_get_ns1__findModelStreamByNameResponse(struct soap*, struct ns1__findModelStreamByNameResponse *, const char*, const char*);

inline int soap_read_ns1__findModelStreamByNameResponse(struct soap *soap, struct ns1__findModelStreamByNameResponse *p)
{
	if (p)
	{	::soap_default_ns1__findModelStreamByNameResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__findModelStreamByNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__findModelStreamByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelStreamByNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__findModelStreamByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__findModelStreamByNameResponse(struct soap *soap, struct ns1__findModelStreamByNameResponse *p)
{
	if (::soap_read_ns1__findModelStreamByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__findModelByName_DEFINED
#define SOAP_TYPE_ns1__findModelByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__findModelByName(struct soap*, struct ns1__findModelByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__findModelByName(struct soap*, const struct ns1__findModelByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__findModelByName(struct soap*, const char*, int, const struct ns1__findModelByName *, const char*);
SOAP_FMAC3 struct ns1__findModelByName * SOAP_FMAC4 soap_in_ns1__findModelByName(struct soap*, const char*, struct ns1__findModelByName *, const char*);
SOAP_FMAC1 struct ns1__findModelByName * SOAP_FMAC2 soap_instantiate_ns1__findModelByName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__findModelByName * soap_new_ns1__findModelByName(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__findModelByName(soap, n, NULL, NULL, NULL);
}

inline struct ns1__findModelByName * soap_new_req_ns1__findModelByName(
	struct soap *soap,
	const std::string& partNumber)
{
	struct ns1__findModelByName *_p = ::soap_new_ns1__findModelByName(soap);
	if (_p)
	{	::soap_default_ns1__findModelByName(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}

inline struct ns1__findModelByName * soap_new_set_ns1__findModelByName(
	struct soap *soap,
	const std::string& partNumber)
{
	struct ns1__findModelByName *_p = ::soap_new_ns1__findModelByName(soap);
	if (_p)
	{	::soap_default_ns1__findModelByName(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__findModelByName(struct soap*, const struct ns1__findModelByName *, const char*, const char*);

inline int soap_write_ns1__findModelByName(struct soap *soap, struct ns1__findModelByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__findModelByName(soap, p), 0) || ::soap_put_ns1__findModelByName(soap, p, "ns1:findModelByName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__findModelByName(struct soap *soap, const char *URL, struct ns1__findModelByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelByName(soap, p), 0) || ::soap_put_ns1__findModelByName(soap, p, "ns1:findModelByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__findModelByName(struct soap *soap, const char *URL, struct ns1__findModelByName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelByName(soap, p), 0) || ::soap_put_ns1__findModelByName(soap, p, "ns1:findModelByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__findModelByName(struct soap *soap, const char *URL, struct ns1__findModelByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelByName(soap, p), 0) || ::soap_put_ns1__findModelByName(soap, p, "ns1:findModelByName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__findModelByName * SOAP_FMAC4 soap_get_ns1__findModelByName(struct soap*, struct ns1__findModelByName *, const char*, const char*);

inline int soap_read_ns1__findModelByName(struct soap *soap, struct ns1__findModelByName *p)
{
	if (p)
	{	::soap_default_ns1__findModelByName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__findModelByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__findModelByName(struct soap *soap, const char *URL, struct ns1__findModelByName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__findModelByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__findModelByName(struct soap *soap, struct ns1__findModelByName *p)
{
	if (::soap_read_ns1__findModelByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__findModelByNameResponse_DEFINED
#define SOAP_TYPE_ns1__findModelByNameResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__findModelByNameResponse(struct soap*, struct ns1__findModelByNameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__findModelByNameResponse(struct soap*, const struct ns1__findModelByNameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__findModelByNameResponse(struct soap*, const char*, int, const struct ns1__findModelByNameResponse *, const char*);
SOAP_FMAC3 struct ns1__findModelByNameResponse * SOAP_FMAC4 soap_in_ns1__findModelByNameResponse(struct soap*, const char*, struct ns1__findModelByNameResponse *, const char*);
SOAP_FMAC1 struct ns1__findModelByNameResponse * SOAP_FMAC2 soap_instantiate_ns1__findModelByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__findModelByNameResponse * soap_new_ns1__findModelByNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__findModelByNameResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__findModelByNameResponse * soap_new_req_ns1__findModelByNameResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__findModelByNameResponse *_p = ::soap_new_ns1__findModelByNameResponse(soap);
	if (_p)
	{	::soap_default_ns1__findModelByNameResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__findModelByNameResponse * soap_new_set_ns1__findModelByNameResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__findModelByNameResponse *_p = ::soap_new_ns1__findModelByNameResponse(soap);
	if (_p)
	{	::soap_default_ns1__findModelByNameResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__findModelByNameResponse(struct soap*, const struct ns1__findModelByNameResponse *, const char*, const char*);

inline int soap_write_ns1__findModelByNameResponse(struct soap *soap, struct ns1__findModelByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__findModelByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelByNameResponse(soap, p, "ns1:findModelByNameResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__findModelByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelByNameResponse(soap, p, "ns1:findModelByNameResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__findModelByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelByNameResponse(soap, p, "ns1:findModelByNameResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__findModelByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__findModelByNameResponse(soap, p), 0) || ::soap_put_ns1__findModelByNameResponse(soap, p, "ns1:findModelByNameResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__findModelByNameResponse * SOAP_FMAC4 soap_get_ns1__findModelByNameResponse(struct soap*, struct ns1__findModelByNameResponse *, const char*, const char*);

inline int soap_read_ns1__findModelByNameResponse(struct soap *soap, struct ns1__findModelByNameResponse *p)
{
	if (p)
	{	::soap_default_ns1__findModelByNameResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__findModelByNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__findModelByNameResponse(struct soap *soap, const char *URL, struct ns1__findModelByNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__findModelByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__findModelByNameResponse(struct soap *soap, struct ns1__findModelByNameResponse *p)
{
	if (::soap_read_ns1__findModelByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ping_DEFINED
#define SOAP_TYPE_ns1__ping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ping(struct soap*, struct ns1__ping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ping(struct soap*, const struct ns1__ping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ping(struct soap*, const char*, int, const struct ns1__ping *, const char*);
SOAP_FMAC3 struct ns1__ping * SOAP_FMAC4 soap_in_ns1__ping(struct soap*, const char*, struct ns1__ping *, const char*);
SOAP_FMAC1 struct ns1__ping * SOAP_FMAC2 soap_instantiate_ns1__ping(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ping * soap_new_ns1__ping(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ping(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ping * soap_new_req_ns1__ping(
	struct soap *soap)
{
	struct ns1__ping *_p = ::soap_new_ns1__ping(soap);
	if (_p)
	{	::soap_default_ns1__ping(soap, _p);
	}
	return _p;
}

inline struct ns1__ping * soap_new_set_ns1__ping(
	struct soap *soap)
{
	struct ns1__ping *_p = ::soap_new_ns1__ping(soap);
	if (_p)
	{	::soap_default_ns1__ping(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ping(struct soap*, const struct ns1__ping *, const char*, const char*);

inline int soap_write_ns1__ping(struct soap *soap, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ping(soap, p), 0) || ::soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ping(soap, p), 0) || ::soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ping(soap, p), 0) || ::soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ping(soap, p), 0) || ::soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ping * SOAP_FMAC4 soap_get_ns1__ping(struct soap*, struct ns1__ping *, const char*, const char*);

inline int soap_read_ns1__ping(struct soap *soap, struct ns1__ping *p)
{
	if (p)
	{	::soap_default_ns1__ping(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ping(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ping(struct soap *soap, struct ns1__ping *p)
{
	if (::soap_read_ns1__ping(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__pingResponse_DEFINED
#define SOAP_TYPE_ns1__pingResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__pingResponse(struct soap*, struct ns1__pingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__pingResponse(struct soap*, const struct ns1__pingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__pingResponse(struct soap*, const char*, int, const struct ns1__pingResponse *, const char*);
SOAP_FMAC3 struct ns1__pingResponse * SOAP_FMAC4 soap_in_ns1__pingResponse(struct soap*, const char*, struct ns1__pingResponse *, const char*);
SOAP_FMAC1 struct ns1__pingResponse * SOAP_FMAC2 soap_instantiate_ns1__pingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__pingResponse * soap_new_ns1__pingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__pingResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__pingResponse * soap_new_req_ns1__pingResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__pingResponse *_p = ::soap_new_ns1__pingResponse(soap);
	if (_p)
	{	::soap_default_ns1__pingResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__pingResponse * soap_new_set_ns1__pingResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__pingResponse *_p = ::soap_new_ns1__pingResponse(soap);
	if (_p)
	{	::soap_default_ns1__pingResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__pingResponse(struct soap*, const struct ns1__pingResponse *, const char*, const char*);

inline int soap_write_ns1__pingResponse(struct soap *soap, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__pingResponse(soap, p), 0) || ::soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__pingResponse(soap, p), 0) || ::soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__pingResponse(soap, p), 0) || ::soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__pingResponse(soap, p), 0) || ::soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__pingResponse * SOAP_FMAC4 soap_get_ns1__pingResponse(struct soap*, struct ns1__pingResponse *, const char*, const char*);

inline int soap_read_ns1__pingResponse(struct soap *soap, struct ns1__pingResponse *p)
{
	if (p)
	{	::soap_default_ns1__pingResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__pingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__pingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__pingResponse(struct soap *soap, struct ns1__pingResponse *p)
{
	if (::soap_read_ns1__pingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__jmsexample_DEFINED
#define SOAP_TYPE_ns1__jmsexample_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__jmsexample(struct soap*, struct ns1__jmsexample *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__jmsexample(struct soap*, const struct ns1__jmsexample *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__jmsexample(struct soap*, const char*, int, const struct ns1__jmsexample *, const char*);
SOAP_FMAC3 struct ns1__jmsexample * SOAP_FMAC4 soap_in_ns1__jmsexample(struct soap*, const char*, struct ns1__jmsexample *, const char*);
SOAP_FMAC1 struct ns1__jmsexample * SOAP_FMAC2 soap_instantiate_ns1__jmsexample(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__jmsexample * soap_new_ns1__jmsexample(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__jmsexample(soap, n, NULL, NULL, NULL);
}

inline struct ns1__jmsexample * soap_new_req_ns1__jmsexample(
	struct soap *soap,
	const std::string& arg1,
	const std::string& arg2)
{
	struct ns1__jmsexample *_p = ::soap_new_ns1__jmsexample(soap);
	if (_p)
	{	::soap_default_ns1__jmsexample(soap, _p);
		_p->arg1 = arg1;
		_p->arg2 = arg2;
	}
	return _p;
}

inline struct ns1__jmsexample * soap_new_set_ns1__jmsexample(
	struct soap *soap,
	const std::string& arg1,
	const std::string& arg2)
{
	struct ns1__jmsexample *_p = ::soap_new_ns1__jmsexample(soap);
	if (_p)
	{	::soap_default_ns1__jmsexample(soap, _p);
		_p->arg1 = arg1;
		_p->arg2 = arg2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__jmsexample(struct soap*, const struct ns1__jmsexample *, const char*, const char*);

inline int soap_write_ns1__jmsexample(struct soap *soap, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__jmsexample(soap, p), 0) || ::soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__jmsexample(soap, p), 0) || ::soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__jmsexample(soap, p), 0) || ::soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__jmsexample(soap, p), 0) || ::soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__jmsexample * SOAP_FMAC4 soap_get_ns1__jmsexample(struct soap*, struct ns1__jmsexample *, const char*, const char*);

inline int soap_read_ns1__jmsexample(struct soap *soap, struct ns1__jmsexample *p)
{
	if (p)
	{	::soap_default_ns1__jmsexample(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__jmsexample(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__jmsexample(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__jmsexample(struct soap *soap, struct ns1__jmsexample *p)
{
	if (::soap_read_ns1__jmsexample(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__jmsexampleResponse_DEFINED
#define SOAP_TYPE_ns1__jmsexampleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__jmsexampleResponse(struct soap*, struct ns1__jmsexampleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__jmsexampleResponse(struct soap*, const struct ns1__jmsexampleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__jmsexampleResponse(struct soap*, const char*, int, const struct ns1__jmsexampleResponse *, const char*);
SOAP_FMAC3 struct ns1__jmsexampleResponse * SOAP_FMAC4 soap_in_ns1__jmsexampleResponse(struct soap*, const char*, struct ns1__jmsexampleResponse *, const char*);
SOAP_FMAC1 struct ns1__jmsexampleResponse * SOAP_FMAC2 soap_instantiate_ns1__jmsexampleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__jmsexampleResponse * soap_new_ns1__jmsexampleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__jmsexampleResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__jmsexampleResponse * soap_new_req_ns1__jmsexampleResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__jmsexampleResponse *_p = ::soap_new_ns1__jmsexampleResponse(soap);
	if (_p)
	{	::soap_default_ns1__jmsexampleResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__jmsexampleResponse * soap_new_set_ns1__jmsexampleResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__jmsexampleResponse *_p = ::soap_new_ns1__jmsexampleResponse(soap);
	if (_p)
	{	::soap_default_ns1__jmsexampleResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__jmsexampleResponse(struct soap*, const struct ns1__jmsexampleResponse *, const char*, const char*);

inline int soap_write_ns1__jmsexampleResponse(struct soap *soap, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || ::soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || ::soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || ::soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || ::soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__jmsexampleResponse * SOAP_FMAC4 soap_get_ns1__jmsexampleResponse(struct soap*, struct ns1__jmsexampleResponse *, const char*, const char*);

inline int soap_read_ns1__jmsexampleResponse(struct soap *soap, struct ns1__jmsexampleResponse *p)
{
	if (p)
	{	::soap_default_ns1__jmsexampleResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__jmsexampleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__jmsexampleResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__jmsexampleResponse(struct soap *soap, struct ns1__jmsexampleResponse *p)
{
	if (::soap_read_ns1__jmsexampleResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetWSDL_DEFINED
#define SOAP_TYPE_ns1__GetWSDL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWSDL(struct soap*, struct ns1__GetWSDL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWSDL(struct soap*, const struct ns1__GetWSDL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWSDL(struct soap*, const char*, int, const struct ns1__GetWSDL *, const char*);
SOAP_FMAC3 struct ns1__GetWSDL * SOAP_FMAC4 soap_in_ns1__GetWSDL(struct soap*, const char*, struct ns1__GetWSDL *, const char*);
SOAP_FMAC1 struct ns1__GetWSDL * SOAP_FMAC2 soap_instantiate_ns1__GetWSDL(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWSDL * soap_new_ns1__GetWSDL(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetWSDL(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetWSDL * soap_new_req_ns1__GetWSDL(
	struct soap *soap)
{
	struct ns1__GetWSDL *_p = ::soap_new_ns1__GetWSDL(soap);
	if (_p)
	{	::soap_default_ns1__GetWSDL(soap, _p);
	}
	return _p;
}

inline struct ns1__GetWSDL * soap_new_set_ns1__GetWSDL(
	struct soap *soap)
{
	struct ns1__GetWSDL *_p = ::soap_new_ns1__GetWSDL(soap);
	if (_p)
	{	::soap_default_ns1__GetWSDL(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWSDL(struct soap*, const struct ns1__GetWSDL *, const char*, const char*);

inline int soap_write_ns1__GetWSDL(struct soap *soap, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetWSDL(soap, p), 0) || ::soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWSDL(soap, p), 0) || ::soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWSDL(soap, p), 0) || ::soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWSDL(soap, p), 0) || ::soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetWSDL * SOAP_FMAC4 soap_get_ns1__GetWSDL(struct soap*, struct ns1__GetWSDL *, const char*, const char*);

inline int soap_read_ns1__GetWSDL(struct soap *soap, struct ns1__GetWSDL *p)
{
	if (p)
	{	::soap_default_ns1__GetWSDL(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetWSDL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetWSDL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetWSDL(struct soap *soap, struct ns1__GetWSDL *p)
{
	if (::soap_read_ns1__GetWSDL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetWSDLResponse_DEFINED
#define SOAP_TYPE_ns1__GetWSDLResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWSDLResponse(struct soap*, struct ns1__GetWSDLResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWSDLResponse(struct soap*, const struct ns1__GetWSDLResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWSDLResponse(struct soap*, const char*, int, const struct ns1__GetWSDLResponse *, const char*);
SOAP_FMAC3 struct ns1__GetWSDLResponse * SOAP_FMAC4 soap_in_ns1__GetWSDLResponse(struct soap*, const char*, struct ns1__GetWSDLResponse *, const char*);
SOAP_FMAC1 struct ns1__GetWSDLResponse * SOAP_FMAC2 soap_instantiate_ns1__GetWSDLResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWSDLResponse * soap_new_ns1__GetWSDLResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetWSDLResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetWSDLResponse * soap_new_req_ns1__GetWSDLResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__GetWSDLResponse *_p = ::soap_new_ns1__GetWSDLResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetWSDLResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__GetWSDLResponse * soap_new_set_ns1__GetWSDLResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__GetWSDLResponse *_p = ::soap_new_ns1__GetWSDLResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetWSDLResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWSDLResponse(struct soap*, const struct ns1__GetWSDLResponse *, const char*, const char*);

inline int soap_write_ns1__GetWSDLResponse(struct soap *soap, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || ::soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || ::soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || ::soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || ::soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetWSDLResponse * SOAP_FMAC4 soap_get_ns1__GetWSDLResponse(struct soap*, struct ns1__GetWSDLResponse *, const char*, const char*);

inline int soap_read_ns1__GetWSDLResponse(struct soap *soap, struct ns1__GetWSDLResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetWSDLResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetWSDLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetWSDLResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetWSDLResponse(struct soap *soap, struct ns1__GetWSDLResponse *p)
{
	if (::soap_read_ns1__GetWSDLResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExecuteSoapJmsRPC_DEFINED
#define SOAP_TYPE_ns1__ExecuteSoapJmsRPC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ExecuteSoapJmsRPC(struct soap*, struct ns1__ExecuteSoapJmsRPC *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExecuteSoapJmsRPC(struct soap*, const struct ns1__ExecuteSoapJmsRPC *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExecuteSoapJmsRPC(struct soap*, const char*, int, const struct ns1__ExecuteSoapJmsRPC *, const char*);
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPC * SOAP_FMAC4 soap_in_ns1__ExecuteSoapJmsRPC(struct soap*, const char*, struct ns1__ExecuteSoapJmsRPC *, const char*);
SOAP_FMAC1 struct ns1__ExecuteSoapJmsRPC * SOAP_FMAC2 soap_instantiate_ns1__ExecuteSoapJmsRPC(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ExecuteSoapJmsRPC * soap_new_ns1__ExecuteSoapJmsRPC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExecuteSoapJmsRPC(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ExecuteSoapJmsRPC * soap_new_req_ns1__ExecuteSoapJmsRPC(
	struct soap *soap)
{
	struct ns1__ExecuteSoapJmsRPC *_p = ::soap_new_ns1__ExecuteSoapJmsRPC(soap);
	if (_p)
	{	::soap_default_ns1__ExecuteSoapJmsRPC(soap, _p);
	}
	return _p;
}

inline struct ns1__ExecuteSoapJmsRPC * soap_new_set_ns1__ExecuteSoapJmsRPC(
	struct soap *soap)
{
	struct ns1__ExecuteSoapJmsRPC *_p = ::soap_new_ns1__ExecuteSoapJmsRPC(soap);
	if (_p)
	{	::soap_default_ns1__ExecuteSoapJmsRPC(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExecuteSoapJmsRPC(struct soap*, const struct ns1__ExecuteSoapJmsRPC *, const char*, const char*);

inline int soap_write_ns1__ExecuteSoapJmsRPC(struct soap *soap, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPC * SOAP_FMAC4 soap_get_ns1__ExecuteSoapJmsRPC(struct soap*, struct ns1__ExecuteSoapJmsRPC *, const char*, const char*);

inline int soap_read_ns1__ExecuteSoapJmsRPC(struct soap *soap, struct ns1__ExecuteSoapJmsRPC *p)
{
	if (p)
	{	::soap_default_ns1__ExecuteSoapJmsRPC(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ExecuteSoapJmsRPC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExecuteSoapJmsRPC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExecuteSoapJmsRPC(struct soap *soap, struct ns1__ExecuteSoapJmsRPC *p)
{
	if (::soap_read_ns1__ExecuteSoapJmsRPC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExecuteSoapJmsRPCResponse_DEFINED
#define SOAP_TYPE_ns1__ExecuteSoapJmsRPCResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ExecuteSoapJmsRPCResponse(struct soap*, struct ns1__ExecuteSoapJmsRPCResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const struct ns1__ExecuteSoapJmsRPCResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const char*, int, const struct ns1__ExecuteSoapJmsRPCResponse *, const char*);
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPCResponse * SOAP_FMAC4 soap_in_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const char*, struct ns1__ExecuteSoapJmsRPCResponse *, const char*);
SOAP_FMAC1 struct ns1__ExecuteSoapJmsRPCResponse * SOAP_FMAC2 soap_instantiate_ns1__ExecuteSoapJmsRPCResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ExecuteSoapJmsRPCResponse * soap_new_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExecuteSoapJmsRPCResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ExecuteSoapJmsRPCResponse * soap_new_req_ns1__ExecuteSoapJmsRPCResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__ExecuteSoapJmsRPCResponse *_p = ::soap_new_ns1__ExecuteSoapJmsRPCResponse(soap);
	if (_p)
	{	::soap_default_ns1__ExecuteSoapJmsRPCResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__ExecuteSoapJmsRPCResponse * soap_new_set_ns1__ExecuteSoapJmsRPCResponse(
	struct soap *soap,
	const std::string& Collection)
{
	struct ns1__ExecuteSoapJmsRPCResponse *_p = ::soap_new_ns1__ExecuteSoapJmsRPCResponse(soap);
	if (_p)
	{	::soap_default_ns1__ExecuteSoapJmsRPCResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const struct ns1__ExecuteSoapJmsRPCResponse *, const char*, const char*);

inline int soap_write_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || ::soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPCResponse * SOAP_FMAC4 soap_get_ns1__ExecuteSoapJmsRPCResponse(struct soap*, struct ns1__ExecuteSoapJmsRPCResponse *, const char*, const char*);

inline int soap_read_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, struct ns1__ExecuteSoapJmsRPCResponse *p)
{
	if (p)
	{	::soap_default_ns1__ExecuteSoapJmsRPCResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ExecuteSoapJmsRPCResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExecuteSoapJmsRPCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, struct ns1__ExecuteSoapJmsRPCResponse *p)
{
	if (::soap_read_ns1__ExecuteSoapJmsRPCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyAttribute_DEFINED
#define SOAP_TYPE_xsd__anyAttribute_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyAttribute2s(struct soap*, struct soap_dom_attribute);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyAttribute(struct soap*, const char*, int, const struct soap_dom_attribute *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *);
SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_in_xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *, const char*);
SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_instantiate_xsd__anyAttribute(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_attribute * soap_new_xsd__anyAttribute(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyAttribute(soap, n, NULL, NULL, NULL);
}

inline struct soap_dom_attribute * soap_new_req_xsd__anyAttribute(
	struct soap *soap)
{
	struct soap_dom_attribute *_p = soap_new_xsd__anyAttribute(soap);
	if (_p)
	{	
	}
	return _p;
}

inline struct soap_dom_attribute * soap_new_set_xsd__anyAttribute(
	struct soap *soap)
{
	struct soap_dom_attribute *_p = soap_new_xsd__anyAttribute(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *, const char*, const char*);
SOAP_FMAC3 struct soap_dom_attribute * SOAP_FMAC4 soap_get_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *, const char*, const char*);
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyType(struct soap*, struct soap_dom_element *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyType(struct soap*, const struct soap_dom_element *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyType2s(struct soap*, struct soap_dom_element);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyType(struct soap*, const char*, int, const struct soap_dom_element *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyType(struct soap*, const char*, struct soap_dom_element *);
SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_in_xsd__anyType(struct soap*, const char*, struct soap_dom_element *, const char*);
SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_element * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline struct soap_dom_element * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	struct soap_dom_element *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	
	}
	return _p;
}

inline struct soap_dom_element * soap_new_set_xsd__anyType(
	struct soap *soap)
{
	struct soap_dom_element *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyType(struct soap*, const struct soap_dom_element *, const char*, const char*);

inline int soap_write_xsd__anyType(struct soap *soap, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct soap_dom_element * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, struct soap_dom_element *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, struct soap_dom_element *p)
{
	if (p)
	{	soap_default_xsd__anyType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, struct soap_dom_element *p)
{
	if (soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
