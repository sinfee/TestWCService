/* soapSoapBindingProxy.cpp
   Generated by gSOAP 2.8.129 for ThkWCIntf.h

gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapSoapBindingProxy.h"

SoapBindingProxy::SoapBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	SoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SoapBindingProxy::SoapBindingProxy(const SoapBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

SoapBindingProxy::SoapBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	SoapBindingProxy_init(_soap->imode, _soap->omode);
}

SoapBindingProxy::SoapBindingProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	SoapBindingProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

SoapBindingProxy::SoapBindingProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	SoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

SoapBindingProxy::SoapBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	SoapBindingProxy_init(iomode, iomode);
}

SoapBindingProxy::SoapBindingProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	SoapBindingProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

SoapBindingProxy::SoapBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	SoapBindingProxy_init(imode, omode);
}

SoapBindingProxy::~SoapBindingProxy()
{	if (this->soap_own)
	{	SoapBindingProxy::destroy();
		soap_free(this->soap);
	}
}

void SoapBindingProxy::SoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns1", "http://www.ptc.com/infoengine/soap/rpc/message/", NULL, NULL },
        { NULL, NULL, NULL, NULL} /* end of namespaces[] */
    };
	soap_set_namespaces(this->soap, namespaces);
}

SoapBindingProxy *SoapBindingProxy::copy()
{	SoapBindingProxy *dup = SOAP_NEW_UNMANAGED(SoapBindingProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

SoapBindingProxy& SoapBindingProxy::operator=(const SoapBindingProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void SoapBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void SoapBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	SoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void SoapBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *SoapBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *SoapBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *SoapBindingProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *SoapBindingProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *SoapBindingProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int SoapBindingProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int SoapBindingProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void SoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void SoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *SoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int SoapBindingProxy::send_ExecuteSoapJmsRPC(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns1__ExecuteSoapJmsRPC soap_tmp_ns1__ExecuteSoapJmsRPC;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPC";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__ExecuteSoapJmsRPC(soap, &soap_tmp_ns1__ExecuteSoapJmsRPC);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ExecuteSoapJmsRPC(soap, &soap_tmp_ns1__ExecuteSoapJmsRPC, "ns1:ExecuteSoapJmsRPC", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ExecuteSoapJmsRPC(soap, &soap_tmp_ns1__ExecuteSoapJmsRPC, "ns1:ExecuteSoapJmsRPC", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SoapBindingProxy::recv_ExecuteSoapJmsRPC(std::string &Collection)
{
	struct ns1__ExecuteSoapJmsRPCResponse *soap_tmp_ns1__ExecuteSoapJmsRPCResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__ExecuteSoapJmsRPCResponse = soap_get_ns1__ExecuteSoapJmsRPCResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__ExecuteSoapJmsRPCResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__ExecuteSoapJmsRPCResponse->Collection;
	return soap_closesock(soap);
}

int SoapBindingProxy::send_GetWSDL(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns1__GetWSDL soap_tmp_ns1__GetWSDL;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!GetWSDL";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__GetWSDL(soap, &soap_tmp_ns1__GetWSDL);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetWSDL(soap, &soap_tmp_ns1__GetWSDL, "ns1:GetWSDL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetWSDL(soap, &soap_tmp_ns1__GetWSDL, "ns1:GetWSDL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SoapBindingProxy::recv_GetWSDL(std::string &Collection)
{
	struct ns1__GetWSDLResponse *soap_tmp_ns1__GetWSDLResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetWSDLResponse = soap_get_ns1__GetWSDLResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__GetWSDLResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__GetWSDLResponse->Collection;
	return soap_closesock(soap);
}

int SoapBindingProxy::send_jmsexample(const char *soap_endpoint_url, const char *soap_action, const std::string& arg1, const std::string& arg2)
{
	struct ns1__jmsexample soap_tmp_ns1__jmsexample;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!jmsexample";
	soap_tmp_ns1__jmsexample.arg1 = arg1;
	soap_tmp_ns1__jmsexample.arg2 = arg2;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__jmsexample(soap, &soap_tmp_ns1__jmsexample);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jmsexample(soap, &soap_tmp_ns1__jmsexample, "ns1:jmsexample", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jmsexample(soap, &soap_tmp_ns1__jmsexample, "ns1:jmsexample", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SoapBindingProxy::recv_jmsexample(std::string &Collection)
{
	struct ns1__jmsexampleResponse *soap_tmp_ns1__jmsexampleResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__jmsexampleResponse = soap_get_ns1__jmsexampleResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__jmsexampleResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__jmsexampleResponse->Collection;
	return soap_closesock(soap);
}

int SoapBindingProxy::send_ping(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns1__ping soap_tmp_ns1__ping;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!ping";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__ping(soap, &soap_tmp_ns1__ping);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ping(soap, &soap_tmp_ns1__ping, "ns1:ping", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ping(soap, &soap_tmp_ns1__ping, "ns1:ping", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SoapBindingProxy::recv_ping(std::string &Collection)
{
	struct ns1__pingResponse *soap_tmp_ns1__pingResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__pingResponse = soap_get_ns1__pingResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__pingResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__pingResponse->Collection;
	return soap_closesock(soap);
}

int SoapBindingProxy::send_findModelByName(const char *soap_endpoint_url, const char *soap_action, const std::string& partNumber)
{
	struct ns1__findModelByName soap_tmp_ns1__findModelByName;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!findModelByName";
	soap_tmp_ns1__findModelByName.partNumber = partNumber;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__findModelByName(soap, &soap_tmp_ns1__findModelByName);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__findModelByName(soap, &soap_tmp_ns1__findModelByName, "ns1:findModelByName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__findModelByName(soap, &soap_tmp_ns1__findModelByName, "ns1:findModelByName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SoapBindingProxy::recv_findModelByName(std::string &Collection)
{
	struct ns1__findModelByNameResponse *soap_tmp_ns1__findModelByNameResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__findModelByNameResponse = soap_get_ns1__findModelByNameResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__findModelByNameResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__findModelByNameResponse->Collection;
	return soap_closesock(soap);
}

int SoapBindingProxy::send_findModelStreamByName(const char *soap_endpoint_url, const char *soap_action, const std::string& partNumber)
{
	struct ns1__findModelStreamByName soap_tmp_ns1__findModelStreamByName;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wc11.qdthinker.com/Windchill/servlet/RPC";
	if (soap_action == NULL)
		soap_action = "urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByName";
	soap_tmp_ns1__findModelStreamByName.partNumber = partNumber;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__findModelStreamByName(soap, &soap_tmp_ns1__findModelStreamByName);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__findModelStreamByName(soap, &soap_tmp_ns1__findModelStreamByName, "ns1:findModelStreamByName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__findModelStreamByName(soap, &soap_tmp_ns1__findModelStreamByName, "ns1:findModelStreamByName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SoapBindingProxy::recv_findModelStreamByName(std::string &Collection)
{
	struct ns1__findModelStreamByNameResponse *soap_tmp_ns1__findModelStreamByNameResponse;
	soap_default_std__string(soap, &Collection);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__findModelStreamByNameResponse = soap_get_ns1__findModelStreamByNameResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__findModelStreamByNameResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Collection = soap_tmp_ns1__findModelStreamByNameResponse->Collection;
	return soap_closesock(soap);
}
/* End of client proxy code */
