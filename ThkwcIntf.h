// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* ThkWCIntf.h
   Generated by wsdl2h 2.8.129 from RPC.xml and typemap.dat
   2023-07-05 09:52:45 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on ThkWCIntf.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.ptc.com/infoengine/soap/rpc/message/                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://www.ptc.com/infoengine/soap/rpc/message/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.ptc.com/infoengine/soap/rpc/message/"
//gsoap ns1   schema namespace:	http://www.ptc.com/infoengine/soap/rpc/message/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ptc.com/infoengine/soap/rpc/message/                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ptc.com/infoengine/soap/rpc/message/                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ptc.com/infoengine/soap/rpc/message/                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ptc.com/infoengine/soap/rpc/message/                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	SoapBinding 
//gsoap ns1  service type:	IEService 
//gsoap ns1  service port:	http://wc11.qdthinker.com/Windchill/servlet/RPC 
//gsoap ns1  service namespace:	http://www.ptc.com/infoengine/soap/rpc/message/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage IESoap Definitions

@section IESoap_bindings Service Bindings

  - @ref SoapBinding

@section IESoap_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page SoapBinding Binding "SoapBinding"

@section SoapBinding_operations Operations of Binding "SoapBinding"

  - @ref ns1__ExecuteSoapJmsRPC

  - @ref ns1__GetWSDL

  - @ref ns1__jmsexample

  - @ref ns1__ping

  - @ref ns1__findModelByName

  - @ref ns1__findModelStreamByName

@section SoapBinding_ports Default endpoints of Binding "SoapBinding"

  - http://wc11.qdthinker.com/Windchill/servlet/RPC

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SoapBinding                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__ExecuteSoapJmsRPC                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__ExecuteSoapJmsRPC" of service binding "SoapBinding".
This task is used internally by Info*Engine.  It is used by JMS SOAP clients to
invoke SOAP methods.
It is not meant to be invoked directly by a web services client.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://wc11.qdthinker.com/Windchill/servlet/RPC

  - Default SOAP action or REST location path:
    - "urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPC"

  - Addressing input action: "urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPC"

  - Addressing output action: "urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ExecuteSoapJmsRPC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    std::string                        &Collection
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ExecuteSoapJmsRPC(
    struct soap *soap,
    // input parameters:
    // output parameters:
    std::string                        &Collection
  );
@endcode

C++ proxy class (defined in soapSoapBindingProxy.h generated with soapcpp2):
@code
  class SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapBindingService.h generated with soapcpp2):
@code
  class SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSoapJmsRPC SOAP
//gsoap ns1  service method-style:	ExecuteSoapJmsRPC rpc
//gsoap ns1  service method-encoding:	ExecuteSoapJmsRPC http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	ExecuteSoapJmsRPC urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPC
//gsoap ns1  service method-output-action:	ExecuteSoapJmsRPC urn:ie-soap-rpc:com.infoengine.soap!ExecuteSoapJmsRPCResponse
int ns1__ExecuteSoapJmsRPC(
    std::string                        &:Collection	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetWSDL                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetWSDL" of service binding "SoapBinding".
This task is used internally by Info*Engine.  It is not meant to be invoked directly
by a
web services client.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://wc11.qdthinker.com/Windchill/servlet/RPC

  - Default SOAP action or REST location path:
    - "urn:ie-soap-rpc:com.infoengine.soap!GetWSDL"

  - Addressing input action: "urn:ie-soap-rpc:com.infoengine.soap!GetWSDL"

  - Addressing output action: "urn:ie-soap-rpc:com.infoengine.soap!GetWSDLResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetWSDL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    std::string                        &Collection
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetWSDL(
    struct soap *soap,
    // input parameters:
    // output parameters:
    std::string                        &Collection
  );
@endcode

C++ proxy class (defined in soapSoapBindingProxy.h generated with soapcpp2):
@code
  class SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapBindingService.h generated with soapcpp2):
@code
  class SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetWSDL SOAP
//gsoap ns1  service method-style:	GetWSDL rpc
//gsoap ns1  service method-encoding:	GetWSDL http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GetWSDL urn:ie-soap-rpc:com.infoengine.soap!GetWSDL
//gsoap ns1  service method-output-action:	GetWSDL urn:ie-soap-rpc:com.infoengine.soap!GetWSDLResponse
int ns1__GetWSDL(
    std::string                        &:Collection	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jmsexample                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__jmsexample" of service binding "SoapBinding".
JMS Example task.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://wc11.qdthinker.com/Windchill/servlet/RPC

  - Default SOAP action or REST location path:
    - "urn:ie-soap-rpc:com.infoengine.soap!jmsexample"

  - Addressing input action: "urn:ie-soap-rpc:com.infoengine.soap!jmsexample"

  - Addressing output action: "urn:ie-soap-rpc:com.infoengine.soap!jmsexampleResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jmsexample(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         arg1,
    std::string                         arg2,
    // output parameters:
    std::string                        &Collection
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jmsexample(
    struct soap *soap,
    // input parameters:
    std::string                         arg1,
    std::string                         arg2,
    // output parameters:
    std::string                        &Collection
  );
@endcode

C++ proxy class (defined in soapSoapBindingProxy.h generated with soapcpp2):
@code
  class SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapBindingService.h generated with soapcpp2):
@code
  class SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	jmsexample SOAP
//gsoap ns1  service method-style:	jmsexample rpc
//gsoap ns1  service method-encoding:	jmsexample http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	jmsexample urn:ie-soap-rpc:com.infoengine.soap!jmsexample
//gsoap ns1  service method-output-action:	jmsexample urn:ie-soap-rpc:com.infoengine.soap!jmsexampleResponse
int ns1__jmsexample(
    std::string                         :arg1,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :arg2,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:Collection	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__ping                                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__ping" of service binding "SoapBinding".
Simple sample method.  This method generates an Info*Engine group containing
a single element containing two attributes:
<ul>
<li><strong><code>vmname</code></strong> The virtual machine name of the Info*Engine
server.
<li><strong><code>date</code></strong> The current date and time.
</ul>

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://wc11.qdthinker.com/Windchill/servlet/RPC

  - Default SOAP action or REST location path:
    - "urn:ie-soap-rpc:com.infoengine.soap!ping"

  - Addressing input action: "urn:ie-soap-rpc:com.infoengine.soap!ping"

  - Addressing output action: "urn:ie-soap-rpc:com.infoengine.soap!pingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ping(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    std::string                        &Collection
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ping(
    struct soap *soap,
    // input parameters:
    // output parameters:
    std::string                        &Collection
  );
@endcode

C++ proxy class (defined in soapSoapBindingProxy.h generated with soapcpp2):
@code
  class SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapBindingService.h generated with soapcpp2):
@code
  class SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ping SOAP
//gsoap ns1  service method-style:	ping rpc
//gsoap ns1  service method-encoding:	ping http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	ping urn:ie-soap-rpc:com.infoengine.soap!ping
//gsoap ns1  service method-output-action:	ping urn:ie-soap-rpc:com.infoengine.soap!pingResponse
int ns1__ping(
    std::string                        &:Collection	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__findModelByName                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__findModelByName" of service binding "SoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://wc11.qdthinker.com/Windchill/servlet/RPC

  - Default SOAP action or REST location path:
    - "urn:ie-soap-rpc:com.infoengine.soap!findModelByName"

  - Addressing input action: "urn:ie-soap-rpc:com.infoengine.soap!findModelByName"

  - Addressing output action: "urn:ie-soap-rpc:com.infoengine.soap!findModelByNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__findModelByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         partNumber,
    // output parameters:
    std::string                        &Collection
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__findModelByName(
    struct soap *soap,
    // input parameters:
    std::string                         partNumber,
    // output parameters:
    std::string                        &Collection
  );
@endcode

C++ proxy class (defined in soapSoapBindingProxy.h generated with soapcpp2):
@code
  class SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapBindingService.h generated with soapcpp2):
@code
  class SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	findModelByName SOAP
//gsoap ns1  service method-style:	findModelByName rpc
//gsoap ns1  service method-encoding:	findModelByName http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	findModelByName urn:ie-soap-rpc:com.infoengine.soap!findModelByName
//gsoap ns1  service method-output-action:	findModelByName urn:ie-soap-rpc:com.infoengine.soap!findModelByNameResponse
int ns1__findModelByName(
    std::string                         :partNumber,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:Collection	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__findModelStreamByName                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__findModelStreamByName" of service binding "SoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://wc11.qdthinker.com/Windchill/servlet/RPC

  - Default SOAP action or REST location path:
    - "urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByName"

  - Addressing input action: "urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByName"

  - Addressing output action: "urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__findModelStreamByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         partNumber,
    // output parameters:
    std::string                        &Collection
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__findModelStreamByName(
    struct soap *soap,
    // input parameters:
    std::string                         partNumber,
    // output parameters:
    std::string                        &Collection
  );
@endcode

C++ proxy class (defined in soapSoapBindingProxy.h generated with soapcpp2):
@code
  class SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapBindingService.h generated with soapcpp2):
@code
  class SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	findModelStreamByName SOAP
//gsoap ns1  service method-style:	findModelStreamByName rpc
//gsoap ns1  service method-encoding:	findModelStreamByName http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	findModelStreamByName urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByName
//gsoap ns1  service method-output-action:	findModelStreamByName urn:ie-soap-rpc:com.infoengine.soap!findModelStreamByNameResponse
int ns1__findModelStreamByName(
    std::string                         :partNumber,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:Collection	///< Output parameter, :unqualified name as per RPC encoding
);

/** @page SoapBinding Binding "SoapBinding"

@section SoapBinding_policy_enablers Policy Enablers of Binding "SoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://www.ptc.com/infoengine/soap/rpc/message/"

*/

/* End of ThkWCIntf.h */
